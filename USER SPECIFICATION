14 Physics Engine Simulator
Write a simulator for physics, like a game may have. Create virtual objects and apply forces
and constraints to them, such as gravity, friction, and collision detection, and initial vector
of motion. Generate a visual representation of the system and simulate the movement of
the objects according to the applied forces and constraints.



Code will focus on RIGID BODY PHYSICS. 

Call certain simulation - prompts to show what kind of simulation the user wants  ( Do you want to add slopes? y/n : ) or ( Load : slopes, Field, Hills : ) 

User inputs;
prompt:
-number of objects, properties of these objects ( scale, position, elasticity(TBD) ) -> Randomise properties? 
-forces ,  ( Apply force - xN in direction ( x* , y* , z* ) ,( center of mass or point on surface? ) ) 

-trigger, ( the start button, program will continue until user will tell it to stop ( No Pause button) )
Condition:
-No interactions ffrom user while the code is running ( MAYBE CLICKS?)



Output;
- Visual window ( objects rendered in its projection)
- No statistics (Starting Position, Final position) 



what we need to code;
-collision detection, 
          software just detects whether the object was in contact. (Decides when to apply force between 2 objects)
-collision response,
          what is being called by collision detection. 
-Rigid Body functions, 
          handling (mass, position, linear velocity, rotational velocity),  impulse (change in momentum) 
          handling geometry and how to determine the interaction between them. 
          Timesteps and how this code should run over a certain amount of time. 

-GUI ,
           How to render the elements in conduction. 
           
-Text based initialisation, 
           Used to select and create the initial values the code is being run from. ( Gravity, How many objects, what forces are being applied to the shapes)
           
-data types and data handling. 
           classes and what is required, structures and vectors to store information. 
           e.g. Rigid body class that cube and sphere class can inherit from. 
                Associated classes that contain the code on how to alter these values. 
           


Research
HOW TO USE TIMESTEPS AND RUN CODE WITHIN A CERTAIN TIMEFRAME ( 24FPS FOR EASE ) 
WHAT ARE THE PHYSICAL RELATIONSHIPS WE NEED TO KNOW
HOW TO DO COLLISIONS
HOW TO WRITE A GUI, AND HOW THIS GUI INTERACTS WITH THE USER
HOW TO MAKE THE CODE RUN EFFICIENTLY AND WHAT STEPS NEED TO COME FIRST

Testing
test the individual modules that run the code itself, 
          Test functions that shows what real physics should be in numerical values of the output,
          Logs and outputs that would reflect real world physics being simulated.
          
          Stress testing and look at what can be altered to gain more performance out of a certain function.
          
          
          
          
week 6-7 research stage, functional specification and testing plan
weeks 7 - 11 implementation/report writing on what the code is and how to use it.
